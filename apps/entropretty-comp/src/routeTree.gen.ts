/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as ProfileImport } from './routes/profile'
import { Route as NewImport } from './routes/new'
import { Route as MineImport } from './routes/mine'
import { Route as LoginImport } from './routes/login'
import { Route as HotImport } from './routes/hot'
import { Route as CreateImport } from './routes/create'
import { Route as IndexImport } from './routes/index'
import { Route as UUsernameImport } from './routes/u.$username'
import { Route as AIdImport } from './routes/a.$id'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const NewRoute = NewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => rootRoute,
} as any)

const MineRoute = MineImport.update({
  id: '/mine',
  path: '/mine',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const HotRoute = HotImport.update({
  id: '/hot',
  path: '/hot',
  getParentRoute: () => rootRoute,
} as any)

const CreateRoute = CreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UUsernameRoute = UUsernameImport.update({
  id: '/u/$username',
  path: '/u/$username',
  getParentRoute: () => rootRoute,
} as any)

const AIdRoute = AIdImport.update({
  id: '/a/$id',
  path: '/a/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/create': {
      id: '/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateImport
      parentRoute: typeof rootRoute
    }
    '/hot': {
      id: '/hot'
      path: '/hot'
      fullPath: '/hot'
      preLoaderRoute: typeof HotImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/mine': {
      id: '/mine'
      path: '/mine'
      fullPath: '/mine'
      preLoaderRoute: typeof MineImport
      parentRoute: typeof rootRoute
    }
    '/new': {
      id: '/new'
      path: '/new'
      fullPath: '/new'
      preLoaderRoute: typeof NewImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/a/$id': {
      id: '/a/$id'
      path: '/a/$id'
      fullPath: '/a/$id'
      preLoaderRoute: typeof AIdImport
      parentRoute: typeof rootRoute
    }
    '/u/$username': {
      id: '/u/$username'
      path: '/u/$username'
      fullPath: '/u/$username'
      preLoaderRoute: typeof UUsernameImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/hot': typeof HotRoute
  '/login': typeof LoginRoute
  '/mine': typeof MineRoute
  '/new': typeof NewRoute
  '/profile': typeof ProfileRoute
  '/signup': typeof SignupRoute
  '/a/$id': typeof AIdRoute
  '/u/$username': typeof UUsernameRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/hot': typeof HotRoute
  '/login': typeof LoginRoute
  '/mine': typeof MineRoute
  '/new': typeof NewRoute
  '/profile': typeof ProfileRoute
  '/signup': typeof SignupRoute
  '/a/$id': typeof AIdRoute
  '/u/$username': typeof UUsernameRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/hot': typeof HotRoute
  '/login': typeof LoginRoute
  '/mine': typeof MineRoute
  '/new': typeof NewRoute
  '/profile': typeof ProfileRoute
  '/signup': typeof SignupRoute
  '/a/$id': typeof AIdRoute
  '/u/$username': typeof UUsernameRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/create'
    | '/hot'
    | '/login'
    | '/mine'
    | '/new'
    | '/profile'
    | '/signup'
    | '/a/$id'
    | '/u/$username'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/create'
    | '/hot'
    | '/login'
    | '/mine'
    | '/new'
    | '/profile'
    | '/signup'
    | '/a/$id'
    | '/u/$username'
  id:
    | '__root__'
    | '/'
    | '/create'
    | '/hot'
    | '/login'
    | '/mine'
    | '/new'
    | '/profile'
    | '/signup'
    | '/a/$id'
    | '/u/$username'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CreateRoute: typeof CreateRoute
  HotRoute: typeof HotRoute
  LoginRoute: typeof LoginRoute
  MineRoute: typeof MineRoute
  NewRoute: typeof NewRoute
  ProfileRoute: typeof ProfileRoute
  SignupRoute: typeof SignupRoute
  AIdRoute: typeof AIdRoute
  UUsernameRoute: typeof UUsernameRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CreateRoute: CreateRoute,
  HotRoute: HotRoute,
  LoginRoute: LoginRoute,
  MineRoute: MineRoute,
  NewRoute: NewRoute,
  ProfileRoute: ProfileRoute,
  SignupRoute: SignupRoute,
  AIdRoute: AIdRoute,
  UUsernameRoute: UUsernameRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/create",
        "/hot",
        "/login",
        "/mine",
        "/new",
        "/profile",
        "/signup",
        "/a/$id",
        "/u/$username"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/create": {
      "filePath": "create.tsx"
    },
    "/hot": {
      "filePath": "hot.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/mine": {
      "filePath": "mine.tsx"
    },
    "/new": {
      "filePath": "new.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/a/$id": {
      "filePath": "a.$id.tsx"
    },
    "/u/$username": {
      "filePath": "u.$username.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
